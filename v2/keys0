#!/usr/local/bin/gawk -f
# vim: filetype=awk ts=2 sw=2 sts=2 et :

BEGIN { start() }
function start(p,seed,sample) {     
  P      = p?p:2
  Seed   = seed?seed:1
  Sample = sample?sample:20
  main() }

function  main(       rows) {
  new(Hi); new(Lo)
  new(X); new(Y)
  new(Name) 
  new(rows)
  file2rows("../data/auto2.csv",rows)
  oo(rows) }

#------------------------------------------
# creating tables

function header(cells,     i) {
  for(i in cells) {
    Name[i] = cells[i]
    cells[i] ~ /[\+\-!]/ ? Y[i] : X[i]
    if (i ~ /^[A-Z]/) { 
      Hi[i]= -1E-32
      Lo[i]=  1E32 }}}

function data(rows,cells,   c,i,r,x) {
  r = 1 + length(rows)
  for(i in cells) {
    x = s2n(cells[i])
    rows[r][i] = x
    for(c in Lo) {
      Lo[c] = min(Lo[c], x)
      Hi[c] = max(Hi[c], x) }}}

function file2rows(file,rows,         cells,n) {
  while (file2cells(file, cells))  { 
    n++ ? data(rows,cells,n) : header(cells)  }}

#------------------------------------------
# querying tables

function norm(c,x)      { return (x-Lo[c])/(Hi[c]-Lo[c]+1E-32)}
function symdist(c,x,y) { return x==y ? 0  : 1 }
function numdist(c,x,y) {
 if      (x=="?") { y= norm(c,y); x= y > 0.5 ? 0 : 1 }
 else if (y=="?") { x= norm(c,x); y= x > 0.5 ? 1 : 0 }
 else             { x= norm(c,x); y= norm(c,y)       }
 return abs(x-y)^P }

function dist(r1,r2,cols,     c,x,y,inc,d,n) {
  d = n = 1E-32
  for(c in cols) {
    x = r1[c]; y=r2[c]
    if (x=="?" && y=="?") 
         inc= 0
    else inc= Hi[c] ? numdist(c,x,y) : symdist(c,x,y);
    d += inc
    n++}
  return (d/n)^(1/P) }

function far(i,rows,cols,     j,k,d,max) {
  for(k=1; k <= Samples; k++) {
    j= any(rows)
    d= dist(rows[i], rows[j], cols)
    if (d>max) out=j }
  return j}

# 
function cluster(above,nodes,rows,cols,tree,node,    
                 one,two,c,r,a,b,xs,mid) {
  tree[nodes][++nodes]
  for(r in all) node[nodes][r]
  if (length(above) < Enough) return
  one = far( any(above), rows,cols)
  two = far( one,      rows,cols)
  c   = dist( rows[one], rows[two], cols)
  for(r in above) {
    a     = dist(rows[r], rows[one], cols)
    b     = dist(rows[r], rows[two], cols)
    xs[r] = (a^2 + c^2 - b^2)/(2*c) }
  mid = int(asort(xs,tmp)/2)
  for(r in xs) 
    xs[r] < tmp[mid] ? left[r] : right[r]
  nodes = cluster(left, nodes,rows,cols,tree,node)
  nodes = cluster(right,nodes,rows,cols,tree,node)
  return nodes }

#------------------------------------------
# lib

function new(a)       { split("",a,"") }
function s2a(s,a,sep) { split(s, a, sep?sep:",") }
function s2n(s,  n)   { n=s+0; return n==s ? n : s } 
function max(x,y)     { return x>y  ? x : y }
function min(x,y)     { return x<y  ? x : y }
function abs(x)       { return x>=0 ? x : -1*x }
function any(a)       { return 1+int(rand()*length(a)) }

function a2s(a,  i,s,sep) {
  for(i in a) { s=s sep a[i]; sep=", " }
  return s }

function rogues(   s) {
  for(s in SYMTAB) 
    if( s !~ /^[A-Z][a-z]*/) 
      print "#W> Rogue " s>"/dev/stderr" }

function file2cells(file,cells,     line) {
  file = file ? file : "-"
  if ((getline line < file)>0) {
    gsub(/[ \t\r]*/,"",line)
    if(!line) 
       return file2cells(file,cells)
    else s2a(line, cells)
    return 1
  } else
    close(file) }

function oo(a,prefix,    indent,   i,txt) {
  txt = indent ? indent : (prefix "." )
  if (!isarray(a)) {print(a); return a}
  ooSortOrder(a)
  for(i in a)  {
    if (isarray(a[i]))   {
      print(txt i"" )
      oo(a[i],"","|  " indent)
    } else
      print(txt i (a[i]==""?"": ": " a[i]))}}

function ooSortOrder(a, i) {
  for (i in a)
   return PROCINFO["sorted_in"] =\
     typeof(i+1)=="number" ? "@ind_num_asc" : "@ind_str_asc"}

BEGIN { rogues() }
